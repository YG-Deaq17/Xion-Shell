# Python 3.7.5 64x
# [encoding = 'utf-8'] INFO: Use this fragment of code for supported Russian Laguage in files.
# console = Console(width=63)
# xsf = Xion Shell File
# scf = Shell Configuration File

import os
import time
from tqdm import tqdm, tqdm_gui, trange
import pyautogui
import rich
from rich.tree import Tree
from rich import print as rprint
from rich.console import Console
from rich import print
from rich.panel import Panel
from rich import style

os.system("cls")
os.system("title Xion. Version: v2.1")
pyautogui.press("F11")

xionctrl = 1
xGetCtrl = 1

console = Console(width=63)
print(Panel.fit("Добро пожаловать в [yellow]Xion[/yellow]! Для продолжения войдите в систему.", title="Система"))

def auth__autoentry():
    pyautogui.press('a')
    pyautogui.press('d')
    pyautogui.press('m')
    pyautogui.press('i')
    pyautogui.press('n')
    pyautogui.press('Enter')
    pyautogui.press('s')
    pyautogui.press('h')
    pyautogui.press('a')
    pyautogui.press('2')
    pyautogui.press('5')
    pyautogui.press('6')
    pyautogui.press('Enter')
    # time.sleep(5)
    # pyautogui.press("-")
    # pyautogui.press("-")
    # pyautogui.press("s")
    # pyautogui.press("t")
    # pyautogui.press("a")
    # pyautogui.press("t")
    # pyautogui.press("Enter")

def console__title():
    # console.print(Panel.fit("[white on blue]debug_mode v2.1")) # NOTE: After release this string need the deleted.
    console.print(Panel.fit("[blue]Xion[/blue] by Usersoft Incorpareted 2023-2025. Version [green]v2.1[/green] commands for begin: [yellow]--list[/yellow]; [yellow]--coms[/yellow]; [yellow]--ver[/yellow]; [yellow]--ver .stat[/yellow]"))

def func__screenclear():
  time.sleep(0.6)
  os.system("cls")

def preload__menu():
    print("Bootmenu launched...")
    time.sleep(2)
    os.system("cls")
    console.print("[green]Bootmenu launched...[green]")
    time.sleep(3)
    console.print("[INFO]23x1: User entered [yellow]login_reg[/yellow] and [yellow]password_reg[/yellow]")
    time.sleep(1)
    console.print("[INFO]23x2: Entred is succeccfully! Get info...")
    time.sleep(1)
    console.print("[INFO]23x3: login: [green]admin[/green]; password:[green]******[/green]")
    time.sleep(1)
    console.print("[INFO]23x4: [yellow]main__system__status[/yellow] in [yellow]xion.main__system[/yellow] have info by [yellow]xion.main__system__status.info[/yellow]")
    time.sleep(1)
    # console.print("[INFO]23x5: [white on blue]Was activated a debug mode!")
    # time.sleep(1)
    # console.print("[yellow]Loading...")
    # time.sleep(1)
    console.print("[INFO]23x5: uploading modules from [yellow].main__system[/yellow]; com:  [yellow]--stat[/yellow]")
    time.sleep(2)
    console.print("[XION.MODULE][yellow]xion.main__system__list[/yellow]")
    time.sleep(0.7)
    console.print("[XION.MODULE][yellow]xion.main__system__grph[/yellow]")
    time.sleep(0.7)
    console.print("[XION.MODULE][yellow]xion.main__system__coms[/yellow]")
    time.sleep(0.7)
    console.print("[XION.MODULE][yellow]xion.main__system__stat[/yellow]")
    time.sleep(0.7)
    console.print("[XION.MODULE][yellow]xion.main__system__title[/yellow]")
    time.sleep(0.7)
    console.print("[XION.MODULE][yellow]xion.main__system__ver[/yellow]")
    time.sleep(0.7)
    console.print("[XION.MODULE][yellow]xion.main__system__sc[/yellow]")
    time.sleep(0.7)
    console.print("[XION.MODULE][yellow]xion.main__system__RESET[/yellow]")
    time.sleep(0.7)
    console.print("[XION.MODULE][yellow]xion.main__system__exit[/yellow]")
    time.sleep(0.7)
    console.print("[XION.MODULE][yellow]xion.main__system__quit[/yellow]")
    time.sleep(3)
    console.print("[INFO]23x6: uploading graphics tests...")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_dvd[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_coin[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_hes[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_cyhm[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_info[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_knot[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_nyan[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_play[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_rick[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_clock[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_parrot[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_donut[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_batman[/yellow]")
    time.sleep(0.7)
    console.print("[GRPH][yellow]xion.main__system__grph_batmanRobbin[/yellow]")
    time.sleep(3)
    console.print("[INFO]23x7: uploading modules from [yellow]xion__xionnet[/yellow]...")
    time.sleep(2)
    console.print("[NET.MODULE][yellow]xion.main__xionnet__storeFilesXGet[/yellow]")
    time.sleep(0.7)
    console.print("[NET.MODULE][yellow]xion.main__xionnet__storeFilesLicence[/yellow]")
    time.sleep(0.7)
    console.print("[NET.MODULE][yellow]xion.main__xionnet__storeFilesAuthors[/yellow]")
    time.sleep(0.7)
    console.print("[NET.MODULE][yellow]xion.main__xionnet__storeFilesReadme[/yellow]")
    time.sleep(0.7)
    console.print("[NET.MODULE][yellow]xion.main__xionnet__storeFilesPi[/yellow]")
    time.sleep(0.7)
    console.print("[NET.MODULE][yellow]xion.main__xionnet__enter[/yellow]")
    time.sleep(0.7)
    console.print("[NET.MODULE][yellow]xion.main__xionnet__comTree[/yellow]")
    time.sleep(0.7)
    console.print("[NET.MODULE][yellow]xion.main__xionnet__getInfo[/yellow]")
    time.sleep(0.7)
    console.print("[NET.MODULE][yellow]xion.main__xionnet__viewerInfo[/yellow]")
    time.sleep(0.7)
    console.print("[NET.MODULE][yellow]xion.main__xionnet__storeFilesViewer[/yellow]")
    time.sleep(2)
    console.print("[INFO]23x8: uploading [red]error's[/red] modules...")
    time.sleep(2)
    console.print("[SUB-MODULE][yellow]xion.main__system_exitError[/yellow]")
    time.sleep(3)
    func__screenclear()

# Graphics Animations.
def main__system__grph_batmanRobbin():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("b")
    pyautogui.press("a")
    pyautogui.press("t")
    pyautogui.press("m")
    pyautogui.press("a")
    pyautogui.press("n")
    pyautogui.press("&")
    pyautogui.press("r")
    pyautogui.press("o")
    pyautogui.press("b")
    pyautogui.press("b")
    pyautogui.press("i")
    pyautogui.press("n")
    pyautogui.press("enter")
def main__system__grph_batman():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("b")
    pyautogui.press("a")
    pyautogui.press("t")
    pyautogui.press("m")
    pyautogui.press("a")
    pyautogui.press("n")
    pyautogui.press("enter")
def main__system__grph_coin():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("o")
    pyautogui.press("l")
    pyautogui.press("o")
    pyautogui.press("r")
    pyautogui.press("space")
    pyautogui.press("0")
    pyautogui.press("6")
    pyautogui.press("space")
    pyautogui.press("&")
    pyautogui.press("space")
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("c")
    pyautogui.press("o")
    pyautogui.press("i")
    pyautogui.press("n")
    pyautogui.press("enter")
def main__system__grph_donut():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("d")
    pyautogui.press("o")
    pyautogui.press("n")
    pyautogui.press("u")
    pyautogui.press("t")
    pyautogui.press("enter")
def main__system__grph_dvd():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("d")
    pyautogui.press("v")
    pyautogui.press("d")
    pyautogui.press("enter")
def main__system__grph_forrest():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("f")
    pyautogui.press("o")
    pyautogui.press("r")
    pyautogui.press("r")
    pyautogui.press("e")
    pyautogui.press("s")
    pyautogui.press("t")
    pyautogui.press("enter")
def main__system__grph_knot():
    os.system("start cmd")
    time.sleep(0.5)
    os.system("color 07")
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("k")
    pyautogui.press("n")
    pyautogui.press("o")
    pyautogui.press("t")
    pyautogui.press("enter")
def main__system__grph_nyan():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("n")
    pyautogui.press("y")
    pyautogui.press("a")
    pyautogui.press("n")
    pyautogui.press("enter")
def main__system__grph_parrot():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("p")
    pyautogui.press("a")
    pyautogui.press("r")
    pyautogui.press("r")
    pyautogui.press("o")
    pyautogui.press("t")
    pyautogui.press("enter")
def main__system__grph_play():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("p")
    pyautogui.press("l")
    pyautogui.press("a")
    pyautogui.press("y")
    pyautogui.press("s")
    pyautogui.press("t")
    pyautogui.press("a")
    pyautogui.press("t")
    pyautogui.press("i")
    pyautogui.press("o")
    pyautogui.press("n")
    pyautogui.press("enter")
def main__system__grph_rick():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("r")
    pyautogui.press("i")
    pyautogui.press("c")
    pyautogui.press("k")
    pyautogui.press("enter")
def main__system__grph_clock():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("o")
    pyautogui.press("l")
    pyautogui.press("o")
    pyautogui.press("r")
    pyautogui.press("space")
    pyautogui.press("7")
    pyautogui.press("1")
    pyautogui.press("space")
    pyautogui.press("&")
    pyautogui.press("space")
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("c")
    pyautogui.press("l")
    pyautogui.press("o")
    pyautogui.press("c")
    pyautogui.press("k")
    pyautogui.press("enter")
def main__system__grph_hes():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("h")
    pyautogui.press("e")
    pyautogui.press("s")
    pyautogui.press("enter")
def main__system__grph_cyhm():
    os.system("start cmd")
    time.sleep(0.5)
    pyautogui.press("c")
    pyautogui.press("o")
    pyautogui.press("l")
    pyautogui.press("o")
    pyautogui.press("r")
    pyautogui.press("space")
    pyautogui.press("7")
    pyautogui.press("0")
    pyautogui.press("space")
    pyautogui.press("&")
    pyautogui.press("space")
    pyautogui.press("c")
    pyautogui.press("u")
    pyautogui.press("r")
    pyautogui.press("l")
    pyautogui.press("space")
    pyautogui.press("a")
    pyautogui.press("s")
    pyautogui.press("c")
    pyautogui.press("i")
    pyautogui.press("i")
    pyautogui.press(".")
    pyautogui.press("l")
    pyautogui.press("i")
    pyautogui.press("v")
    pyautogui.press("e")
    pyautogui.press("/")
    pyautogui.press("c")
    pyautogui.press("a")
    pyautogui.press("n")
    pyautogui.press("-")
    pyautogui.press("y")
    pyautogui.press("o")
    pyautogui.press("u")
    pyautogui.press("-")
    pyautogui.press("h")
    pyautogui.press("e")
    pyautogui.press("a")
    pyautogui.press("r")
    pyautogui.press("-")
    pyautogui.press("m")
    pyautogui.press("e")
    pyautogui.press("enter")

# Xion Errors modules
def xion__main__system_exitError():
    uptade__memory_anim0c = "(Error: xion.main__system)Обновление памяти...-"
    uptade__memory_anim1c = "(Error: xion.main__system)Обновление памяти...\ "
    uptade__memory_anim2c = "(Error: xion.main__system)Обновление памяти...|"
    uptade__memory_anim3c = "(Error: xion.main__system)Обновление памяти.../"
    uptade__memory_anim4c = "(  [green]Ok[/green]  )Обновление памяти...Обновлено."
    animation__memoryUptade = 0
    while animation__memoryUptade <= 10:
        console.print(uptade__memory_anim0c)
        time.sleep(0.1)
        os.system("cls")
        console.print(uptade__memory_anim1c)
        time.sleep(0.1)
        os.system("cls")
        console.print(uptade__memory_anim2c)
        time.sleep(0.1)
        os.system("cls")
        console.print(uptade__memory_anim3c)
        time.sleep(0.1)
        os.system("cls")
        animation__memoryUptade = animation__memoryUptade + 1
    console.print(uptade__memory_anim4c)
    os.system("pause")
    main__system__title()

# Xionnet files
def main__xionnet__storeFilesLicence():
    func__screenclear()
    print(Panel.fit("| Файл [yellow]licence.xsf[/yellow] |"))
    overflow_methods = [""]
    for overflow in overflow_methods:
        console.rule(overflow)
        console.print(style="yellow")
        console.print("")
        licence_open = open("C:\\xion\\builds\\v2_1\\store_files\\licence.xsf", 'r')
        screen_view = licence_open.read()
        print(screen_view)
        overflow_methods = [""]
        for overflow in overflow_methods:
            console.rule(overflow)
            console.print(style="yellow")
            console.print("")
def main__xionnet__storeFilesReadme():
    func__screenclear()
    print(Panel.fit("| Файл [yellow]readme.xsf[/yellow] |"))
    overflow_methods = [""]
    for overflow in overflow_methods:
        console.rule(overflow)
        console.print(style="yellow")
        console.print("")
        licence_open = open("C:\\xion\\builds\\v2_1\\store_files\\readme.xsf", 'r', encoding = 'utf-8')
        screen_view = licence_open.read()
        print(screen_view)
        overflow_methods = [""]
        for overflow in overflow_methods:
            console.rule(overflow)
            console.print(style="yellow")
            console.print("")
def main__xionnet__storeFilesAuthors():
    func__screenclear()
    print(Panel.fit("| Файл [yellow]authors.xsf[/yellow] |"))
    overflow_methods = [""]
    for overflow in overflow_methods:
        console.rule(overflow)
        console.print(style="yellow")
        console.print("")
        print("")
        licence_open = open("C:\\xion\\builds\\v2_1\\store_files\\authors.xsf", 'r')
        screen_view = licence_open.read()
        print(screen_view)
        overflow_methods = [""]
        for overflow in overflow_methods:
            console.rule(overflow)
            console.print(style="yellow")
            console.print("")
def main__xionnet__storeFilesPi():
    func__screenclear()
    print(Panel.fit("| Файл [yellow]pi.xsf[/yellow] |"))
    overflow_methods = [""]
    for overflow in overflow_methods:
        console.rule(overflow)
        console.print(style="yellow")
        console.print("")
        print("")
        licence_open = open("C:\\xion\\builds\\v2_1\\store_files\\pi.xsf", 'r')
        screen_view = licence_open.read()
        print(screen_view)
        overflow_methods = [""]
        for overflow in overflow_methods:
            console.rule(overflow)
            console.print(style="yellow")
            console.print("")

# Xionnet modules
def main__xionnet__storeFilesViewer():
    list = Tree("NAME                       TYPE               EXTENSION")
    list.add("Licence                file                 .xsf")
    list.add("Readme                 file                 .xsf")
    list.add("Authors                file                 .xsf")
    list.add("Pi                     file                 .xsf")
    rprint(list)
    console.print("storage:     xion.main__xionnet__storeFiles")
    console.print("server:      localhost\\xion.net")
def main__xionnet__viewerInfo():
    viewerInfo_open = open("C:\\xion\\builds\\v2_1\\xionnetModules\\viewerInfo.xnf", 'r', encoding = 'utf-8')
    screenViewer_view = viewerInfo_open.read()
    print(screenViewer_view)
def main__xionnet__getInfo():
    getInfo_open = open("C:\\xion\\builds\\v2_1\\xionnetModules\\getInfo.xnf", 'r', encoding = 'utf-8')
    screen_view = getInfo_open.read()
    print(screen_view)
def main__xionnet__comTree():
    xionComs = Tree("Commands in Xion Shell")
    xionComs.add("--list")
    xionComs.add("--coms")
    xionComs.add("--grph")
    xionComs.add("--ver")
    xionComs.add("--sc")
    xionComs.add("--stat")
    xionComs.add("--title")
    xionComs.add("  RESET")
    xionComs.add("--exit")
    xionComs.add("--quit")
    rprint(xionComs)
    connectCom = Tree("Command for connected to Xion.net")
    connectCom.add("--connect localhost\\\\xion.net")
    rprint(connectCom)
    xionnetComs = Tree("Commands in Xion.net")
    xionnetComs.add("Get")
    xionnetComs.add("Files")
    xionnetComs.add("Shell")
    xionnetComs.add("Xion")
    xionnetComs.add("(get)Get")
    xionnetComs.add("(get)Tree")
    xionnetComs.add("(get)Back")
    xionnetComs.add("(get)Viewer")
    xionnetComs.add("(get\\file)Licence.xsf")
    xionnetComs.add("(get\\file)Readme.xsf")
    xionnetComs.add("(get\\file)Authors.xsf")
    xionnetComs.add("(get\\file)Pi.xsf")
    rprint(xionnetComs)
def main__xionnet__enter():
    func__screenclear()
    console.print("[  CONNECTING  ]Connecting to localhost: localhost\\xion.net")
    time.sleep(3)
    func__screenclear()
    con = "[  CONNECTING  ]Connecting to localhost: localhost\\xion.net..."
    console.print(con)
    timePercent = 0
    while timePercent <= 100:
        print(str(con) + str(timePercent) + str("%"))
        time.sleep(0.01)
        os.system("cls")
        timePercent = timePercent + 1
    func__screenclear()
    conOk = console.print("[  [green]Ok[/green]  ]Connecting to localhost: localhost\\xion.net")
    time.sleep(3)
    func__screenclear()
    console.print("localhost\\xion.net")
    time.sleep(3)
    func__screenclear()
    main__xionnet__storeFilesViewer()
def main__xionnet__storeFilesXGet(xGetCtrl):
    while xGetCtrl == 1:
        xget = console.input("[black on green]xion.net\\get[/black on green] ")
        if xget == "Get" or xget == "get":
            main__xionnet__getInfo()
        elif xget == "Viewer" or xget == "viewer":
            main__xionnet__storeFilesViewer()
        elif xget == "Tree" or xget == "tree":
            main__xionnet__comTree()
        elif xget == "Back" or xget == "back":
            xionctrl = 0
            xionctrl = xionctrl + 1
            xGetCtrl = 1
            xGetCtrl = xGetCtrl - 1
            xion__xionnet(xionctrl)
        elif xget == ".file\\Licence.xsf" or xget == ".file\\licence.xsf":
            main__xionnet__storeFilesLicence()
        elif xget == ".file\\Readme.xsf" or xget == ".file\\readme.xsf":
            main__xionnet__storeFilesReadme()
        elif xget == ".file\\Authors.xsf" or xget == ".file\\authors.xsf":
            main__xionnet__storeFilesAuthors()
        elif xget == ".file\\Pi.xsf" or xget == ".file\\pi.xsf":
            main__xionnet__storeFilesPi()
        else:
            console.print("[red]Файла " + xget + " не найдено.")

# Xion modules.
def main__system__list():
    list = Tree("[yellow]файлы[/yellow] в директории [green]store_files[/green]:")
    list.add("licence.xsf")
    list.add("readme.xsf")
    list.add("authors.xsf")
    list.add("pi.xsf")
    rprint(list)
    console.print("[black on yellow]Для просмотра файлов введите команду:[yellow on black]                          '--connect localhost\\\\xion.net'")
def main__system__grph(anim_check):
    while anim_check == 1:
        func__screenclear()
        listAnim = Tree("Список графических тестов:")
        listAnim.add(":[green]1[/green]:    Batman&robin_animation;")
        listAnim.add(":[green]2[/green]:    Batman_animation;")
        listAnim.add(":[yellow]3[/yellow]:    Coin_animation;")
        listAnim.add(":[green]4[/green]:    Donut_animation;")
        listAnim.add(":[green]5[/green]:    DVD_animation;")
        listAnim.add(":[green]6[/green]:    Forrest_animation;")
        listAnim.add(":[green]7[/green]:    Knot_animation;")
        listAnim.add(":[green]8[/green]:    NyanCat_animation;")
        listAnim.add(":[green]9[/green]:    ParrotBird_animation;")
        listAnim.add(":[green]10[/green]:   PlayStation_animation;")
        listAnim.add(":[green]11[/green]:   Rick_animation;")
        listAnim.add(":[green]12[/green]:   Clock_animation;")
        listAnim.add(":[green]13[/green]:   Hes(SLS logo)_animation;")
        listAnim.add(":[green]14[/green]:   Can-You-Hear-Me_animation;")
        rprint(listAnim)
        console.print("Итого: 14 анимаций [green]доступных[/green] для [black on green]воспроизведения.")
        time.sleep(2)
        list_play = console.input("[black on yellow]|Выбераем по цифрам!|-> На какой анимации остановим наш выбор?> ")
        if list_play == "1":
            main__system__grph_batmanRobbin()
        elif list_play == "2":
            main__system__grph_batman()
        elif list_play == "3":
            main__system__grph_coin()
        elif list_play == "4":
            main__system__grph_donut()
        elif list_play == "5":
            main__system__grph_dvd()
        elif list_play == "6":
            main__system__grph_forrest()
        elif list_play == "7":
            main__system__grph_knot()
        elif list_play == "8":
            main__system__grph_nyan()
        elif list_play == "9":
            main__system__grph_parrot()
        elif list_play == "10":
            main__system__grph_play()
        elif list_play == "11":
            main__system__grph_rick()
        elif list_play == "12":
            main__system__grph_clock()
        elif list_play == "13":
            main__system__grph_hes()
        elif list_play == "14":
            main__system__grph_cyhm()
        elif list_play == "shell" or list_play == "xion" or list_play == "Shell" or list_play == "Xion":
            anim_check = anim_check - 1
            xion__main__system()
        else:
            console.print("[white on red]Frames not founded...")
            anim_check = anim_check - 1
            time.sleep(3)
            xion__main__system()
def main__system__coms():
  commands_open = open("C:\\xion\\builds\\v2_1\\store_files\\coms.scf", 'r', encoding = 'utf-8')
  screencom_view = commands_open.read()
  print(screencom_view)
def main__system__stat():
    print(Panel.fit("[black on white]Загрузка статуса", title="--stat"))
    time.sleep(2)
    console.print("[yellow]main__system__status[/yellow] in [yellow]xion.main__system[/yellow] have info by [yellow]xion.main__system__status.info[/yellow]")
    console.print("uploading modules from [yellow].main__system[/yellow]; com:  [yellow]--stat[/yellow]")
    time.sleep(1)
    console.print("[yellow][    [green]Ok[/green]    ]...................xion.main__system__list[/yellow]")
    time.sleep(0.4)
    console.print("[yellow][    [green]Ok[/green]    ]...................xion.main__system__grph[/yellow]")
    time.sleep(0.4)
    console.print("[yellow][    [green]Ok[/green]    ]...................xion.main__system__coms[/yellow]")
    time.sleep(0.4)
    console.print("[yellow][    [green]Ok[/green]    ]...................xion.main__system__stat[/yellow]")
    time.sleep(0.4)
    console.print("[yellow][    [green]Ok[/green]    ]...................xion.main__system__title[/yellow]")
    time.sleep(0.4)
    console.print("[yellow][    [green]Ok[/green]    ]...................xion.main__system__ver[/yellow]")
    time.sleep(0.4)
    console.print("[yellow][    [green]Ok[/green]    ]...................xion.main__system__sc[/yellow]")
    time.sleep(0.4)
    console.print("[yellow][    [green]Ok[/green]    ]...................xion.main__system__RESET[/yellow]")
    time.sleep(0.4)
    console.print("[yellow][    [green]Ok[/green]    ]...................xion.main__system__exit[/yellow]")
    time.sleep(0.4)
    console.print("[yellow][    [green]Ok[/green]    ]...................xion.main__system__quit[/yellow]")
    time.sleep(1)
    console.print("status:  [black on green]Ok")
    time.sleep(2)
    console.print("shell:   Working")
    time.sleep(2)
    console.print("build:   2023_v2.1")
    time.sleep(2)
def main__system__title():
  func__screenclear()
  console__title()
def main__system__ver():
  console.print("--[yellow]v2.1[/yellow]")
def main__system__sc():
  func__screenclear()
def main__system__RESET():
  print(Panel.fit("[white on blue]Вы действительно хотите перезагрузить оболочку?"))
  choice = input("Да(Y) или Нет(N)? --")
  if choice == "y" or choice == "Y":
      pyautogui.press("F11")
      console.print("[red on white]ПРОИЗОВОДИМ ПЕРЕЗАГРУЗКУ...")
      time.sleep(3)
      os.system('start C:\\xion\\builds\\v2_1\\main.py')
      exit()
  elif choice == "n" or choice == "N":
      xion__main__system()
  else:
      xion__main__system()
def main__system__quitexit():
    try:
        console.print(Panel.fit("[black on yellow]Вы действительно хотите покинуть оболочку XION?"))
        exit__quetion = console.input("Да(Y) или Нет(N)? --")
        if exit__quetion == "Yes" or exit__quetion == "yes" or exit__quetion == "Да" or exit__quetion == "да" or exit__quetion == "Y" or exit__quetion == "y":
            pyautogui.press("F11")
            exit()
        elif exit__quetion == "No" or exit__quetion == "no" or exit__quetion == "Нет" or exit__quetion == "нет" or exit__quetion == "N" or exit__quetion == "n":
            xion__main__system()
        else:
            console.print(Panel.fit("(Error: xion.main__system)Ошибка в главном модуле..."))
            time.sleep(2)
            func__screenclear()
            xion__main__system_exitError()
    except EOFError:
        console.print("[white on red]Недопустимый параметр в главном модуле...")

# Modules with arguments:

# .STAT
def main__system__list_stat():
    print(Panel.fit("Загрузка статуса",title="com: list"))
    time.sleep(2)
    console.print("type:             [yellow]file[/yellow]")
    time.sleep(0.7)
    console.print("name:             [yellow]list[/yellow]")
    time.sleep(0.7)
    console.print("init:             [yellow]xion.main__system__list[/yellow]")
    time.sleep(0.7)
    console.print("shell:            [yellow]xion[/yellow]")
    time.sleep(0.7)
    console.print("ver.shell:        [yellow]2.1[/yellow]")
    time.sleep(0.7)
    console.print("typewrite:      [yellow]--list[/yellow]")
    time.sleep(0.7)
    console.print("status:           [black on green]Ok")
    time.sleep(1)
def main__system__licence_stat():
    print(Panel.fit("Загрузка статуса",title="com: licence"))
    time.sleep(2)
    console.print("type:             [yellow]file[/yellow]")
    time.sleep(0.7)
    console.print("name:             [yellow]licence[/yellow]")
    time.sleep(0.7)
    console.print("init:             [yellow]xion.main__system__licence[/yellow]")
    time.sleep(0.7)
    console.print("shell:            [yellow]xion[/yellow]")
    time.sleep(0.7)
    console.print("ver.shell:        [yellow]2.1[/yellow]")
    time.sleep(0.7)
    console.print("typewrite:      [yellow]--licence[/yellow]")
    time.sleep(0.7)
    console.print("status:           [black on green]Ok")
    time.sleep(1)
def main__system__readme_stat():
    print(Panel.fit("Загрузка статуса",title="com: --readme"))
    time.sleep(2)
    console.print("type:             [yellow]file[/yellow]")
    time.sleep(0.7)
    console.print("name:             [yellow]readme[/yellow]")
    time.sleep(0.7)
    console.print("init:             [yellow]xion.main__system__readme[/yellow]")
    time.sleep(0.7)
    console.print("shell:            [yellow]xion[/yellow]")
    time.sleep(0.7)
    console.print("ver.shell:        [yellow]2.1[/yellow]")
    time.sleep(0.7)
    console.print("typewrite:      [yellow]--readme[/yellow]")
    time.sleep(0.7)
    console.print("status:           [black on green]Ok")
    time.sleep(1)
def main__system__grph_stat():
    print(Panel.fit("Загрузка статуса",title="com: grph"))
    time.sleep(2)
    console.print("type:             [yellow]test[/yellow]")
    time.sleep(0.7)
    console.print("name:             [yellow]grph[/yellow]")
    time.sleep(0.7)
    console.print("init:             [yellow]xion.main__system__grph[/yellow]")
    time.sleep(0.7)
    console.print("shell:            [yellow]xion[/yellow]")
    time.sleep(0.7)
    console.print("ver.shell:        [yellow]2.1[/yellow]")
    time.sleep(0.7)
    console.print("typewrite:      [yellow]--grph[/yellow]")
    time.sleep(0.7)
    console.print("status:           [black on green]Ok")
    time.sleep(1)
def main__system__coms_stat():
    print(Panel.fit("Загрузка статуса",title="com: coms"))
    time.sleep(2)
    console.print("type:             [yellow]comand[/yellow]")
    time.sleep(0.7)
    console.print("name:             [yellow]coms[/yellow]")
    time.sleep(0.7)
    console.print("init:             [yellow]xion.main__system__coms[/yellow]")
    time.sleep(0.7)
    console.print("shell:            [yellow]xion[/yellow]")
    time.sleep(0.7)
    console.print("ver.shell:        [yellow]2.1[/yellow]")
    time.sleep(0.7)
    console.print("typewrite:      [yellow]--coms[/yellow]")
    time.sleep(0.7)
    console.print("status:           [black on green]Ok")
    time.sleep(1)
def main__system__stat_stat():
    console.print("Введённая вами команда невыполнима. Нельзя посмотреть статус статуса.")
    print(Panel.fit("[red]xion.main__system__stat[/red], arg:   [yellow].stat[/yellow]", title="[red]Erorr"))
def main__system__ver_stat():
    print(Panel.fit("Загрузка статуса",title="com: ver"))
    time.sleep(2)
    console.print("type:             [yellow]comand[/yellow]")
    time.sleep(0.7)
    console.print("name:             [yellow]ver[/yellow]")
    time.sleep(0.7)
    console.print("init:             [yellow]xion.main__system__ver[/yellow]")
    time.sleep(0.7)
    console.print("shell:            [yellow]xion[/yellow]")
    time.sleep(0.7)
    console.print("ver.shell:        [yellow]2.1[/yellow]")
    time.sleep(0.7)
    console.print("typewrite:      [yellow]--ver[/yellow]")
    time.sleep(0.7)
    console.print("status:           [black on green]Ok")
    time.sleep(1)
    console.print("[yellow]xion.main__system__ver[/yellow] have information by [yellow]xion.main__system__ver.stat[/yellow]")
    time.sleep(1)
    console.print("Upload...")
    time.sleep(2)
    print(Panel.fit("[white on green]Актуальная версия оболочки: v2.1"))
    time.sleep(2)
def main__system__sc_stat():
    print(Panel.fit("Загрузка статуса",title="com: sc"))
    time.sleep(2)
    console.print("type:             [yellow]comand[/yellow]")
    time.sleep(0.7)
    console.print("name:             [yellow]sc[/yellow]")
    time.sleep(0.7)
    console.print("init:             [yellow]xion.main__system__sc[/yellow]")
    time.sleep(0.7)
    console.print("shell:            [yellow]xion[/yellow]")
    time.sleep(0.7)
    console.print("ver.shell:        [yellow]2.1[/yellow]")
    time.sleep(0.7)
    console.print("typewrite:      [yellow]--sc[/yellow]")
    time.sleep(0.7)
    console.print("status:           [black on green]Ok")
def main__system__RESET_stat():
    print(Panel.fit("Загрузка статуса",title="com: RESET"))
    time.sleep(2)
    console.print("type:             [yellow]comand[/yellow]")
    time.sleep(0.7)
    console.print("name:             [yellow]RESET[/yellow]")
    time.sleep(0.7)
    console.print("init:             [yellow]xion.main__system__RESET[/yellow]")
    time.sleep(0.7)
    console.print("shell:            [yellow]xion[/yellow]")
    time.sleep(0.7)
    console.print("ver.shell:        [yellow]2.1[/yellow]")
    time.sleep(0.7)
    console.print("typewrite:      [yellow]RESET[/yellow]")
    time.sleep(0.7)
    console.print("status:           [black on green]Ok")
def main__system__quitexit_stat():
    print(Panel.fit("Загрузка статуса",title="com: exit/quit"))
    time.sleep(2)
    console.print("type:             [yellow]comand[/yellow]")
    time.sleep(0.7)
    console.print("name:             [yellow]exit/quit[/yellow]")
    time.sleep(0.7)
    console.print("init:             [yellow]xion.main__system__exit;[/yellow]")
    console.print("                  [yellow]xion.main__system__quit[/yellow]")
    time.sleep(0.7)
    console.print("shell:            [yellow]xion[/yellow]")
    time.sleep(0.7)
    console.print("ver.shell:        [yellow]2.1[/yellow]")
    time.sleep(0.7)
    console.print("typewrite:      [yellow]--exit; --quit[/yellow]")
    time.sleep(0.7)
    console.print("status:           [black on green]Ok")

# .INFO
def main__system__list_info():
    console.print("[yellow]list[/yellow] - команда отображающая список файлов хранящихся непосредственно в папке [green]store_files[/green]")
    console.print("name           [yellow]list[/yellow]")
    console.print("module         [yellow]main__system__list[/yellow]")
def main__system__licence_info():
    console.print("[yellow]licence[/yellow] - команда отображающая лицензию, её номер и краткое содержание информации об оболочке.")
    console.print("name           [yellow]licence[/yellow]")
    console.print("module         [yellow]main__system__licence[/yellow]")
def main__system__readme_info():
    console.print("[yellow]readme[/yellow] - команда открывающая [bold]readme.xsf[/bold] в [green]store_files[/green]. Краткая документация к оболочке.")
    console.print("name           [yellow]readme[/yellow]")
    console.print("module         [yellow]main__system__readme[/yellow]")
def main__system__grph_info():
    console.print("[yellow]grph[/yellow] - команда которая производит графический тест оболочки, для показания минимальных возомжностей.")
    console.print("name           [yellow]grph[/yellow]")
    console.print("module         [yellow]main__system__grph[/yellow]")
def main__system__coms_info():
    console.print("[yellow]coms[/yellow] - команда отображающая все доступные к использванию команды, которые работают только в оболочке.")
    console.print("name           [yellow]coms[/yellow]")
    console.print("module         [yellow]main__system__coms[/yellow]")
def main__system__stat_info():
    console.print("[yellow]stat[/yellow] - команда отображающая все доступные модули. Модуль - это функция в коде, которая отвечает за выполнение той или иной команды.")
    console.print("name           [yellow]stat[/yellow]")
    console.print("module         [yellow]main__system__stat[/yellow] <- Пример модуля.")
def main__system__ver_info():
    console.print("[yellow]ver[/yellow] - команда кратко отображающая версию оболочки.")
    console.print("name           [yellow]ver[/yellow]")
    console.print("module         [yellow]main__system__ver[/yellow]")
def main__system__sc_info():
    console.print("[yellow]sc[/yellow] - команда очищающая консоль. Аналог cls.")
    console.print("name           [yellow]sc[/yellow]")
    console.print("module         [yellow]main__system__sc[/yellow]")
def main__system__RESET_info():
    console.print("[yellow]RESET[/yellow] - команда для принудительной перезагрузки")
    console.print("name           [yellow]RESET[/yellow]")
    console.print("module         [yellow]main__system__RESET[/yellow]")
def main__system__quitexit_info():
    console.print("[yellow]exit[/yellow] - команда отображающая все доступные к использванию команды, которые работают только в оболочке.")
    console.print("name           [yellow]exit[/yellow]")
    console.print("module         [yellow]main__system__exit[/yellow]; [yellow]main__system__quit[/yellow]")

# .MODE
def main__system__list_mode():
    print(Panel.fit("Загружаем данные..."))
    time.sleep(1)
    console.print("Mode:             [black on green]Launch from Shell")
    console.print("Change:           [red]No Possibility.[/red]")
def main__system__licence_mode():
    print(Panel.fit("Загружаем данные..."))
    time.sleep(1)
    console.print("Mode:             [black on green]Launch from Xion.net")
    console.print("Info:             [black on yellow]For connect typed:")
    console.print("                [yellow]--connect localhost\\xion.net[/yellow]")
    console.print("Change:           [yellow]Required Xionnet[/yellow]")
def main__system__readme_mode():
    print(Panel.fit("Загружаем данные..."))
    time.sleep(1)
    console.print("Mode:             [black on green]Launch from Xion.net")
    console.print("Info:             [black on yellow]For connect typed:")
    console.print("                [yellow]--connect localhost\\xion.net[/yellow]")
    console.print("Change:           [yellow]Required Xionnet[/yellow]")
def main__system__grph_mode():
    print(Panel.fit("Загружаем данные..."))
    time.sleep(1)
    console.print("Mode:             [black on green]Launch from Shell")
    console.print("Change:           [red]No Possibility.[/red]")
def main__system__coms_mode():
    print(Panel.fit("Загружаем данные..."))
    time.sleep(1)
    console.print("Mode:             [black on green]Launch from Shell")
    console.print("Change:           [red]No Possibility.[/red]")
def main__system__stat_mode():
    print(Panel.fit("Загружаем данные..."))
    time.sleep(1)
    console.print("Mode:             [black on green]Launch from Shell")
    console.print("Change:           [red]No Possibility.[/red]")
def main__system__ver_mode():
    print(Panel.fit("Загружаем данные..."))
    time.sleep(1)
    console.print("Mode:             [black on green]Launch from Shell")
    console.print("Change:           [red]No Possibility.[/red]")
def main__system__sc_mode():
    print(Panel.fit("Загружаем данные..."))
    time.sleep(1)
    console.print("Mode:             [black on green]Launch from Shell")
    console.print("Change:           [red]No Possibility.[/red]")
def main__system__RESET_mode():
    print(Panel.fit("Загружаем данные..."))
    time.sleep(1)
    console.print("Mode:             [black on green]Launch from Shell")
    console.print("Change:           [red]No Possibility.[/red]")
def main__system__quitexit_mode():
    print(Panel.fit("Загружаем данные..."))
    time.sleep(1)
    console.print("Mode:             [black on green]Launch from Shell")
    console.print("Change:           [red]No Possibility.[/red]")

# Self xionnet
def xion__xionnet(xionctrl):
    while xionctrl == 1:
        xionnet__action = console.input("xion.net\\")
        if xionnet__action == "Get" or xionnet__action == "get":
            xionctrl = 1
            xionctrl = xionctrl - 1
            xGetCtrl = 0
            xGetCtrl = xGetCtrl + 1
            main__xionnet__storeFilesXGet(xGetCtrl)
        elif xionnet__action == "Viewer" or xionnet__action == "viewer":
            main__xionnet__viewerInfo()
        elif xionnet__action == "disconnect" or xionnet__action == "Disconnect":
            console.print("Disconnected by Xion.net...")
            time.sleep(2)
            console.print("Disconnected by Xion.net...[ [green]Ok[/green] ]")
            time.sleep(1)
            xionctrl = xionctrl - 1
            break
            time.sleep(1)
            func__screenclear()
            xion__main__system()
        else:
            console.print("[red]Метод " + xionnet__action + " не найден, для справки: 'get'.")

# Self shell
def xion__main__system():
    in__action = console.input("[green]$")
    if in__action == "":
        None
    elif in__action == "--list" or in__action == "--List":
        main__system__list()
    elif in__action == "--list .stat" or in__action == "--List .stat":
        main__system__list_stat()
    elif in__action == "--list .info" or in__action == "--List .info":
        main__system__list_info()
    elif in__action == "--list .mode" or in__action == "--List .mode":
        main__system__list_mode()
    elif in__action == "--licence .stat" or in__action == "--Licence .stat":
        main__system__licence_stat()
    elif in__action == "--licence .info" or in__action == "--Licence .info":
        main__system__licence_info()
    elif in__action == "--licence .mode" or in__action == "--Licence .mode":
        main__system__licence_mode()
    elif in__action == "--readme .stat" or in__action == "--Readme .stat":
        main__system__readme_stat()
    elif in__action == "--readme .info" or in__action == "--Readme .info":
        main__system__readme_info()
    elif in__action == "--readme .mode" or in__action == "--Readme .mode":
        main__system__readme_mode()
    elif in__action == "--grph" or in__action == "--Grph":
        anim_check = 1
        main__system__grph(anim_check)
    elif in__action == "--grph .stat" or in__action == "--Grph .stat":
        main__system__grph_stat()
    elif in__action == "--grph .info" or in__action == "--Grph .info":
        main__system__grph_info()
    elif in__action == "--grph .mode" or in__action == "--Grph .mode":
        main__system__grph_mode()
    elif in__action == "--coms" or in__action == "--Coms":
         main__system__coms()
    elif in__action == "--coms .stat" or in__action == "--Coms .stat":
        main__system__coms_stat()
    elif in__action == "--coms .info" or in__action == "--Coms .info":
        main__system__coms_info()
    elif in__action == "--coms .mode" or in__action == "--Coms .imode":
        main__system__coms_mode()
    elif in__action == "--stat" or in__action == "--Stat":
        main__system__stat()
    elif in__action == "--stat .stat" or in__action == "--Stat .stat":
        main__system__stat_stat()
    elif in__action == "--stat .info" or in__action == "--Stat .info":
        main__system__stat_info()
    elif in__action == "--stat .mode" or in__action == "--Stat .mode":
        main__system__stat_mode()
    elif in__action == "--title" or in__action == "--Title":
        main__system__title()
    elif in__action == "--ver" or in__action == "--Ver":
        main__system__ver()
    elif in__action == "--ver .stat" or in__action == "--Ver .stat":
        main__system__ver_stat()
    elif in__action == "--ver .info" or in__action == "--Ver .info":
        main__system__ver_info()
    elif in__action == "--ver .mode" or in__action == "--Ver .mode":
        main__system__ver_mode()
    elif in__action == "--sc" or in__action == "--Sc":
        main__system__sc()
    elif in__action == "--sc .stat" or in__action == "--Sc .stat":
        main__system__sc_stat()
    elif in__action == "--sc .info" or in__action == "--Sc .info":
        main__system__sc_info()
    elif in__action == "--sc .mode" or in__action == "--Sc .mode":
        main__system__sc_mode()
    elif in__action == "--RESET .stat":
        main__system__RESET_stat()
    elif in__action == "--RESET .info" or in__action == "--RESET .info":
        main__system__RESET_info()
    elif in__action == "--RESET .mode" or in__action == "--RESET .mode":
        main__system__RESET_mode()
    elif in__action == "--exit" or in__action == "--Exit" or in__action == "--quit" or in__action == "--Quit":
        main__system__quitexit()
    elif in__action == "--exit .stat" or in__action == "--Exit .stat" or in__action == "--quit .stat" or in__action == "--Quit .stat":
        main__system__quitexit_stat()
    elif in__action == "--exit .info" or in__action == "--Exit .info" or in__action == "--quit .info" or in__action == "--Quit .info":
        main__system__quitexit_info()
    elif in__action == "--exit .mode" or in__action == "--Exit .mode" or in__action == "--quit .mode" or in__action == "--Quit .mode":
        main__system__quitexit_mode()
    elif in__action == "--connect localhost\\\\xion.net" or in__action == "--Connect localhost\\\\xion.net":
        main__xionnet__enter()
        xion__xionnet(xionctrl)
    elif in__action == "RESET":
        main__system__RESET()
    else:
        console.print("[red]Команда " + in__action + " неправильно введена или не существует.")

def load(login__reg):
    for i in tqdm(range(100), desc='ВХОДИМ...   ', unit=' ПОДОЖДИТЕ'):
        time.sleep(0.03)
    os.system("cls")
    preload__menu()
    message = print(Panel.fit("Добро пожаловать в оболочку " + login__reg + "!", title="[green]Приветствие[/green]"))
    time.sleep(3.5)
    os.system("cls")
    console__title()
    xion__main__system()

def auth(login__reg):
    password = input("Пароль от Аккаунта: ")
    if password == "sha256":
        overflow_methods = ["ДОСТУП РАЗРЕШЁН. ПРОИЗВОДИМ ВХОД"]
        for overflow in overflow_methods:
            console.rule(overflow)
            console.print(style="white")
            console.print()
        load(login__reg)
    else:
        print("Неверно введён пороль!")
        auth(login__reg)

def user():
    login__reg = input("Имя пользователя: ")
    if login__reg == "admin":
        auth(login__reg)
    else:
        print("Неверное имя пользователя!")
        user()

# auth__autoentry()
user()
while True:
    xion__main__system()
